"use client";
import React, { useEffect, useState } from "react";
import { useParams, useRouter, useSearchParams } from "next/navigation";
import { ChevronLeft, Search, Edit, Trash, Plus } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { AddVariantDialog } from "@/components/add-verient-dialog";
import DashboardDetails from "./dashboard-details";
import { Textarea } from "./ui/textarea";

const stats = [
  {
    label: "Total Revenue",
    value: "$ 45,904",
    change: "-8% vs last week",
    changeType: "negative",
  },
  {
    label: "Overall Rating",
    value: "4.3",
    change: "(45 Reviews)",
    changeType: "neutral",
  },
  {
    label: "Money generated by the provider",
    value: "$ 145,674",
    change: "+12% vs last week",
    changeType: "positive",
  },
  {
    label: "Commission earned by Hanat",
    value: "$ 1200",
    change: "+12% vs last week",
    changeType: "positive",
  },
];

const addSubCategoriesClient = () => {
    const router = useRouter();
      const searchParams = useSearchParams();
      const defaultTab = searchParams.get("tab") || "edit-category";
    
      const [isAddVariantOpen, setIsAddVariantOpen] = useState(false);
      const [activeTab, setActiveTab] = useState(defaultTab);
      const [loading, setLoading] = useState(false);
    
      const [subcategoryForm, setSubcategoryForm] = useState({
        name: "",
        description: "",
      });
    const [variants, setVariants] = useState([
    ]);
    
    const handleAddVariant = (newVariant) => {
      setVariants([ newVariant]);
      setIsAddVariantOpen(false);
    };
    useEffect(() => {
      console.log("Variants updated:", variants);
    }, [variants]);
      const handleInputChange = (e) => {
        const { name, value } = e.target;
        setSubcategoryForm((prev) => ({ ...prev, [name]: value }));
      };
    
      const handleTabChange = (value) => {
        if (value === activeTab) return;
    
        setLoading(true);
        const newParams = new URLSearchParams(Array.from(searchParams.entries()));
        newParams.set("tab", value);
        router.push(`?${newParams.toString()}`);
    
        setTimeout(() => {
          setActiveTab(value);
          setLoading(false);
        }, 700);
      };
    
      const params = useParams();
      const categoryId = params.id;
      const isNewCategory = categoryId === "new";
    
      useEffect(() => {
        if (defaultTab === "edit-category") {
          const categoryUrl = `/service-management/add-service/add-category`;
          router.replace(categoryUrl);
        } else {
          setActiveTab(defaultTab);
        }
      }, [defaultTab]);
  return (
     <div>
      {/* Header */}
      <div className="flex items-center gap-4 bg-white px-6 py-4">
        <Button
          variant="ghost"
          size="icon"
          className="h-8 w-8"
          onClick={() => router.back()}
        >
          <ChevronLeft className="h-4 w-4" />
        </Button>
        <div>
          <h1 className="2xl:text-lg text-sm font-semibold">Service Management</h1>
          <p className="2xl:text-sm text-xs text-muted-foreground">
            Lorem ipsum management
          </p>
        </div>
      </div>

      {/* Tabs */}
      <div className="border-b bg-white">
        <Tabs
          value={activeTab}
          onValueChange={handleTabChange}
          className="w-full"
        >
          <TabsList className="h-auto bg-transparent p-0">
            <TabsTrigger
              value="edit-category"
              className="!rounded-none border-b-2 border-transparent px-8 py-3 2xl:text-sm text-xs font-medium text-gray-500 hover:text-gray-700 data-[state=active]:border-black data-[state=active]:text-black data-[state=active]:shadow-none data-[state=active]:bg-gray-100"
            >
             Add Category
            </TabsTrigger>
            <TabsTrigger
              value="sub-category"
              className="!rounded-none border-b-2 px-8 py-3 2xl:text-sm text-xs font-medium text-gray-500 hover:text-gray-700 data-[state=active]:border-black data-[state=active]:text-black data-[state=active]:shadow-none data-[state=active]:bg-gray-100"
            >
              Sub-Category
            </TabsTrigger>
          </TabsList>
        </Tabs>
      </div>

      {/* Content */}
      <div className="flex-1 overflow-auto">
        {loading ? (
          <div className="p-6 flex items-center justify-center h-40">
            <span className="animate-spin rounded-full h-8 w-8 border-t-4 border-b-4 border-gray-900"></span>
          </div>
        ) : activeTab !== "edit-category" ? (
          <div className="p-6">
                        <DashboardDetails stats={stats} />

            <h2 className="2xl:text-lg text-sm font-medium mb-4">Sub-category list</h2>
            <div className="space-y-4 p-4">
              <div>
                <label
                  htmlFor="subcategoryName"
                  className="block 2xl:text-sm text-xs font-medium mb-1"
                >
                  Sub-Category Name
                </label>
                <Input
                  id="subcategoryName"
                  name="name"
                  value={subcategoryForm.name}
                  onChange={handleInputChange}
                  placeholder="Sofa"
                  className="h-10 max-w-sm"
                />
              </div>

              <div>
                <label
                  htmlFor="description"
                  className="block 2xl:text-sm text-xs font-medium mb-1"
                >
                  Description
                </label>
                <Textarea
                  id="description"
                  name="description"
                  value={subcategoryForm.description}
                  onChange={handleInputChange}
                  placeholder="Enter Description"
                  className="max-w-sm"
                />
              </div>

              <div className="mt-8">
                <h3 className="2xl:text-sm text-xs font-medium mb-2">Add Variant</h3>
                <div className="flex flex-wrap gap-2 mb-4">
                {variants.map((variant, index) => (
  <div key={index} className="flex gap-1">
    {variant.options.map((option, i) => (
      <div
        key={i}
        className="bg-blue-50 text-blue-600 text-xs px-3 py-1 rounded-full"
      >
        {option}
      </div>
    ))}
  </div>
))}

                </div>

                <Button
                  variant="outline"
                  size="sm"
                  className="flex items-center gap-1 h-8 text-xs"
                  onClick={() => setIsAddVariantOpen(true)}
                >
                  <Plus className="h-3 w-3" />
                  Add Custom Field
                </Button>
              </div>
            </div>
          </div>
        ) : (
          <div className="p-6"></div>
        )}
      </div>

      <AddVariantDialog
        open={isAddVariantOpen}
        onOpenChange={setIsAddVariantOpen}
        initialVariants={variants}
        onSave={handleAddVariant}
      />
    </div>
  )
}

export default addSubCategoriesClient;